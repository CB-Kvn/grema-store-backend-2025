// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  role              Role      @default(USER)
  active            Boolean   @default(true)
  passwordChangedAt DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  loginAttempts     Int       @default(0)
  lockedUntil       DateTime?
  lastLogin         DateTime?
  refreshToken      String?
}

enum Role {
  USER
  ADMIN
  WAREHOUSE
  MANAGER
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  category    String?
  sku         String?   @unique
  details     Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  available   Boolean @default(true)
  CartItem    CartItem[]
  WarehouseItem WarehouseItem[]
  Images       Image[]
  OrderItem   OrderItem[]
}

model Discount {
  id           Int           @id @default(autoincrement())
  warehouseItemId String      @unique
  warehouseItem  WarehouseItem @relation(fields: [warehouseItemId], references: [id])
  type         DiscountType
  value        Float
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean        @default(true)
  minQuantity  Int?           // Minimum quantity required for discount
  maxQuantity  Int?           // Maximum quantity allowed for discount
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  BUY_X_GET_Y
}

model Image {
  id             Int            @id @default(autoincrement())
  url            String
  state           Boolean  @default(true)
  productId Int 
  Product  Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    String?
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CartItem {
  id           Int      @id @default(autoincrement())
  quantity     Int
  cartId       Int
  productId    Int
  isGift       Boolean  @default(false) // Indica si el producto es un regalo
  isBestSeller Boolean  @default(false) // Indica si el producto es un "best seller"
  isNew        Boolean  @default(false) // Indica si el producto es nuevo
  giftMessage  String?
  cart         Cart     @relation(fields: [cartId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
}

model Warehouse {
  id               String          @id @default(uuid())
  name             String
  location         String
  address          String
  manager          String
  phone            String
  email            String
  capacity         Int
  currentOccupancy Int
  status           WarehouseStatus @default(ACTIVE)
  items            WarehouseItem[]
  lastInventoryDate DateTime?
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model WarehouseItem {
  id           String         @id @default(uuid())
  productId    Int
  product      Product        @relation(fields: [productId], references: [id])
  warehouseId  String
  warehouse    Warehouse      @relation(fields: [warehouseId], references: [id])
  quantity     Int
  minimumStock Int
  location     String
  price        Float          // Precio del producto en este inventario
  discount     Discount?      // Descuento asociado al producto en este inventario
  status       StockStatus    @default(IN_STOCK)
  lastUpdated  DateTime       @updatedAt
  movements    StockMovement[]
}

model StockMovement {
  id           String         @id @default(uuid())
  itemId       String
  item         WarehouseItem  @relation(fields: [itemId], references: [id])
  type         MovementType
  quantity     Int
  date         DateTime       @default(now())
  reference    String?
  notes        String?
  userId       String
}

model PurchaseOrder {
  id                  String            @id @default(uuid())
  orderNumber        String            @unique
  supplierId         String
  supplier           Supplier          @relation(fields: [supplierId], references: [id])
  status             OrderStatus       @default(PENDING)
  orderDate          DateTime          @default(now())
  expectedDeliveryDate DateTime
  actualDeliveryDate  DateTime?
  items              OrderItem[]
  totalAmount        Float
  paymentStatus      PaymentStatus     @default(PENDING)
  paymentTerms       String
  trackingNumber     String?
  shippingMethod     String?
  notes              String?
  documents          Document[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model OrderItem {
  id           String        @id @default(uuid())
  orderId      String
  order        PurchaseOrder @relation(fields: [orderId], references: [id])
  productId    Int
  product      Product       @relation(fields: [productId], references: [id])
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  isGift       Boolean  @default(false) // Indica si el producto es un regalo
  isBestSeller Boolean  @default(false) // Indica si el producto es un "best seller"
  isNew        Boolean  @default(false) // Indica si el producto es nuevo
  status       OrderItemStatus @default(PENDING)
}

model Document {
  id          String        @id @default(uuid())
  orderId     String
  order       PurchaseOrder @relation(fields: [orderId], references: [id])
  type        DocumentType
  title       String
  url         String
  uploadedAt  DateTime      @default(now())
  status      DocumentStatus @default(PENDING)
  hash        String        // Store file hash for integrity check
  mimeType    String        // Store file type
  size        Int          // Store file size in bytes
}

model Supplier {
  id           String         @id @default(uuid())
  name         String
  contactPerson String
  email        String
  phone        String
  address      String
  taxId        String
  paymentTerms String
  rating       Float
  status       SupplierStatus @default(ACTIVE)
  notes        String?
  orders       PurchaseOrder[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
}

model Expense {
  id          String        @id @default(uuid())
  date        DateTime
  description String
  amount      Float
  category    ExpenseCategory
  paymentMethod String
  receipt     String?
  notes       String?
  subtotal Float
  taxes Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  state       Boolean       @default(true)
  userId      String        // Track who created the expense
  approvedBy  String?       // Track who approved the expense
  approvedAt  DateTime?     // Track when it was approved
}

model AuditLog {
  id          String      @id @default(uuid())
  action      String      // The action performed (e.g., "create", "update", "delete")
  entityType  String      // The type of entity affected (e.g., "Product", "Order")
  entityId    String      // The ID of the affected entity
  userId      String      // The user who performed the action
  changes     Json        // Store the changes made
  ipAddress   String      // Store the IP address
  userAgent   String      // Store the user agent
  timestamp   DateTime    @default(now())
}

model Google {
  id       String @id @default(uuid())
  googleId String? @unique
  email    String? @unique
  name     String?
  avatar  String?
  createdAt DateTime? @default(now())
}

enum WarehouseStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
}

enum MovementType {
  IN
  OUT
  TRANSFER
}

enum OrderStatus {
  PENDING
  APPROVED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderItemStatus {
  PENDING
  RECEIVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
}

enum DocumentType {
  INVOICE
  RECEIPT
  DELIVERY_NOTE
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
}

enum ExpenseCategory {
  MATERIALS
  TOOLS
  MARKETING
  SALARIES
  RENT
  SERVICES
  OTHER
}

